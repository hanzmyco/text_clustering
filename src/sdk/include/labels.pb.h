// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: labels.proto

#ifndef PROTOBUF_INCLUDED_labels_2eproto
#define PROTOBUF_INCLUDED_labels_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_labels_2eproto 

namespace protobuf_labels_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_labels_2eproto
namespace labels {
class labels;
class labelsDefaultTypeInternal;
extern labelsDefaultTypeInternal _labels_default_instance_;
}  // namespace labels
namespace google {
namespace protobuf {
template<> ::labels::labels* Arena::CreateMaybeMessage<::labels::labels>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace labels {

// ===================================================================

class labels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:labels.labels) */ {
 public:
  labels();
  virtual ~labels();

  labels(const labels& from);

  inline labels& operator=(const labels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  labels(labels&& from) noexcept
    : labels() {
    *this = ::std::move(from);
  }

  inline labels& operator=(labels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const labels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const labels* internal_default_instance() {
    return reinterpret_cast<const labels*>(
               &_labels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(labels* other);
  friend void swap(labels& a, labels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline labels* New() const final {
    return CreateMaybeMessage<labels>(NULL);
  }

  labels* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<labels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const labels& from);
  void MergeFrom(const labels& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(labels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  float points(int index) const;
  void set_points(int index, float value);
  void add_points(float value);
  const ::google::protobuf::RepeatedField< float >&
      points() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:labels.labels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > points_;
  mutable int _points_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_labels_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// labels

// repeated float points = 1;
inline int labels::points_size() const {
  return points_.size();
}
inline void labels::clear_points() {
  points_.Clear();
}
inline float labels::points(int index) const {
  // @@protoc_insertion_point(field_get:labels.labels.points)
  return points_.Get(index);
}
inline void labels::set_points(int index, float value) {
  points_.Set(index, value);
  // @@protoc_insertion_point(field_set:labels.labels.points)
}
inline void labels::add_points(float value) {
  points_.Add(value);
  // @@protoc_insertion_point(field_add:labels.labels.points)
}
inline const ::google::protobuf::RepeatedField< float >&
labels::points() const {
  // @@protoc_insertion_point(field_list:labels.labels.points)
  return points_;
}
inline ::google::protobuf::RepeatedField< float >*
labels::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:labels.labels.points)
  return &points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace labels

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_labels_2eproto
